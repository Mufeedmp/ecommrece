<%- include("../../views/partials/admin/header") %>
<style>
    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }
</style>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 mt-60">
            <form method="POST" action="/admin/editCategory/<%=category._id%>" enctype="multipart/form-data">
                <div class="d-grid text-end mt-30 col-md-5">
                    <button class="btn btn-primary" type="submit">Update category</button>
                </div>
                <div class="mb-4 mt-30">
                    <label for="product_name" class="form-label">Name</label>
                    <input type="text" name="categoryname" value="<%=category.name%>" class="form-control border" />
                    <div id="name-error" class="error-message"></div>
                </div>
                
                <div class="mb-4">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control border"><%=category.description%></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>

                <div class="mb-4 mt-30">
                    <label for="category_offer" class="form-label">Offer %</label>
                    <input type="text" name="categoryOffer" value="<%=category.categoryOffer%>" class="form-control border" />
                    <div id="offer-error" class="error-message"></div>
                </div>

                <div class="mb-4 position-relative">
                    <label for="category_image" class="form-label">Image</label>
                    <input type="file" name="images" class="form-control" id="category_image" accept="image/*" />
                    <div class="col-md-12">
                        <div class="mb-4" style="position: relative; display: inline-block;">
                            <div class="col-12">
                             
                                <input type="hidden" name="existingImages[]" value="<%=category.imagePath %>" id="imageDatas">
                                <img 
                                class="rounded uploaded-image" 
                                style="width: 50px; height: 60px; display: block;" 
                                src="<%= category.imagePath %>" 
                                alt="Category Image">
                            
                            
                                <i 
                                    onclick="deleteCategoryImage('<%=category.imagePath %>', '<%= category._id %>')" 
                                    style="position: absolute; top: 0; right: 0; background: #ff0000; color: #fff; 
                                           border-radius: 50%; width: 20px; height: 20px; display: flex; 
                                           justify-content: center; align-items: center; cursor: pointer; font-size: 14px;" 
                                    class="fa fa-times">
                                </i>
                            </div>
                        </div>
                    </div>
                    <div id="image-error" class="error-message"></div>
                </div>
            </form>
        </div>
    </div>
</div>
<%- include("../../views/partials/admin/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    
    document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form');
    if (form) {
        form.removeAttribute('onsubmit');
        form.addEventListener('submit', async function(event) {
            event.preventDefault();
     
            const name = document.querySelector('input[name="categoryname"]').value.trim();
            const description = document.querySelector('textarea[name="description"]').value.trim();
            const offer = document.querySelector('input[name="categoryOffer"]').value.trim();
            
            document.querySelectorAll('.error-message').forEach(error => {
                error.textContent = '';
                error.style.display = 'none';
            });
            
            let isValid = true;
            
            if (name === '') {
                showError('name-error', 'Please enter a name');
                isValid = false;
            }
          
            if (description === '') {
                showError('description-error', 'Please enter a description');
                isValid = false;
            }
            
            if(offer === '') {
                showError('offer-error', 'Please enter a Offer');
                isValid = false;
            } else if(!/^[0-9]+$/.test(offer)) {
                showError('offer-error', 'Offer must be a number');
                isValid = false;  
            }
            
            if (isValid) {
                try {
                    const formData = new FormData(form);
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });
                    
                    // Check if the response is JSON
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const data = await response.json();
                        
                        if (!response.ok) {
                            if (response.status === 400 && data.message) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: data.message,
                                    confirmButtonColor: '#3085d6'
                                });
                            } else if (response.status === 404) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Category not found',
                                    confirmButtonColor: '#3085d6'
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Something went wrong. Please try again.',
                                    confirmButtonColor: '#3085d6'
                                });
                            }
                        }
                    } else {
                        // If response is not JSON, it's likely a successful redirect
                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Category updated successfully!',
                                confirmButtonColor: '#3085d6'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/admin/category';
                                }
                            });
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while processing your request',
                        confirmButtonColor: '#3085d6'
                    });
                }
            }
        });
    }
});

function showError(elementId, message) {
    const errorDiv = document.getElementById(elementId);
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        errorDiv.style.color = 'red';
    }
}



async function deleteCategoryImage(name, categoryId) {
    try {
        const response = await fetch(`/admin/deleteImage/${categoryId}/${encodeURIComponent(name)}`, {
            method: "DELETE",
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Image deleted successfully!',
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to delete image!',
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again!',
        });
        console.error("Error deleting image:", error);
    }
}


      </script>