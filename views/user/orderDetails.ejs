<!DOCTYPE html>
<html lang="zxx">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Male_Fashion Template" />
    <meta name="keywords" content="Male_Fashion, unica, creative, html" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Gents Club </title>

    <!-- Google Font -->
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap"
      rel="stylesheet"
    />

    <!-- Css Styles -->
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css" />
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css" />
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css" />
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css" />
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css" />
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css" />
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css" />
    <link rel="stylesheet" href="/css/style.css" type="text/css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  
<style>
/* Scoped styles for the order details container */
.container1 {
  max-width: 800px;
  margin: 30px auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

/* Titles */
.container1 h1,
.container1 h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
  font-weight: 700;
}

/* Tables */
.container1 table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

.container1 th,
.container1 td {
  padding: 12px;
  text-align: left;
  border: 1px solid #e0e0e0;
}

.container1 th {
  background-color: #f9f9f9;
  font-weight: bold;
}

.container1 td img {
  max-width: 80px;
  max-height: 80px;
  display: block;
  margin: 0 auto;
  border-radius: 4px;
}

/* Buttons */
.container1 button {
  display: block;
  width: 100%;
  max-width: 200px;
  margin: 20px auto;
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.container1 button:hover {
  background-color: #0056b3;
}

/* Cancel Button */
.container1 #cancel-button {
  background-color: #dc3545;
}

.container1 #cancel-button:hover {
  background-color: #c82333;
}

/* Forms */
.container1 form {
  margin-top: 20px;
}

.container1 form label {
  display: block;
  margin-bottom: 5px;
  color: #555;
}

.container1 form select,
.container1 form textarea {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

.container1 textarea {
  resize: none;
}

.container1 form button {
  max-width: 150px;
  margin: 10px 0;
}

/* Review Section */
.container1 .review-section {
  border-top: 1px solid #e0e0e0;
  padding-top: 20px;
  margin-top: 20px;
}

.container1 .review-section p {
  margin-bottom: 10px;
  color: #333;
  font-weight: bold;
}

.container1 .review-section form {
  width: 100%;
}

/* Centered Messages */
.container1 p {
  text-align: center;
  color: #555;
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: 15px;
  }

  .container1 th,
  .container1 td {
    font-size: 14px;
  }

  .container1 button {
    font-size: 14px;
    padding: 8px 12px;
  }

  .container1 form {
    font-size: 14px;
  }
}


</style>
   
   
</head>
<body>


<%- include("../../views/partials/user/header") %>

    <div class="container1">
        <h1>Order Details</h1>

       
        <table class="order-details">
            <tr>
                <th>Order ID</th>
                <td><%= order.orderId %></td>
            </tr>
            <tr>
                <th>Order Status</th>
                <td><%= order.status %></td>
            </tr>
            <tr>
                <th>Order Date</th>
                <td><%= order.orderDate %></td>
            </tr>
            <tr>
                <th>Payment Status</th>
                <td><%= order.paymentStatus %></td>
            </tr>
            <tr>
              <th>Payment Method</th>
              <td><%= order.paymentMethod %></td>
          </tr>
            <tr>
                <th>Total Amount</th>
                <td>₹<%= order.totalAmount+order.discount %></td>
            </tr>
            <tr>
              <th>Total Discount</th>
              <td>₹<%= order.discount %></td>
          </tr>
          <tr>
            <th>Amount</th>
            <td>₹<%= order.totalAmount %></td>
        </tr>
        </table>

        

        <h2>Address</h2>
        <table class="address-table">
            <tr>
                <th>Name</th>
                <td><%=address.name%></td>
            </tr>
            <tr>
                <th>Place</th>
                <td><%=address.landmark%></td>
            </tr>
            <tr>
                <th>City</th>
                <td><%=address.city%></td>
            </tr>
            <tr>
                <th>State</th>
                <td><%=address.state%></td>
            </tr>
            <tr>
                <th>Pincode</th>
                <td><%=address.pincode%></td>
            </tr>
            <tr>
                <th>Phone</th>
                <td><%=address.phone%></td>
            </tr>
        </table>

        <h2>Items in Order</h2>
        <table class="order-items">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Size</th>
                    <th>Quantity</th>
                    <th>Total Amount</th>
                    <th>Discount</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
              
                <%
                let discountPerQty=0
                  order.items.forEach(item => { 
                    discountPerQty=order.discount/order.totalQuantity

                    %>
             
                    <tr>
                        <td>
                            <img src="/uploads/product-images/<%= item.image %>" alt="<%= item.productId.name %>">
                        </td>
                        <td><%= item.size %></td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= item.total %></td>
                        <td>₹<%=(discountPerQty*item.quantity).toFixed(2) %></td>
                        <td>₹<%= (item.total-discountPerQty).toFixed(2) %></td>
                        <td>
                          <% if (item.itemStatus !== 'Cancelled') { %>
                            <% if (order.status !== 'Delivered' && order.paymentStatus !== 'Payment Pending'&& order.status !== 'Return requested'&& order.status !== 'Return accepted') { %>
                              <button onclick="cancelItem('<%= order.orderId %>', '<%= item.productId %>', '<%= item._id %>')">Cancel Item</button>
                            <% } %>
                          <% } else { %>
                            <p>Cancelled</p>
                          <% } %>
                        </td>
                        
                    </tr>
                <% }); %>
            </tbody>
        </table>
       
        <% if (order.status !== 'Cancelled' && order.status !== 'Delivered'&& order.status !== 'Returned'&& order.status !== 'Pending'
        && order.status !== 'Return requested'&& order.status !== 'Return accepted') { %>
          <form id="cancel" action="/cancelOrder/<%= order.orderId %>" method="POST">
            <button id="cancel-button" data-id="<%= order.orderId %>">Cancel Order</button>
          </form>
        <% } %>
        
        <% if (order.status === 'Delivered') { %>
          <a href="/download-invoice/<%= order.orderId %>" class="btn btn-success" id="download-excel">Download Invoice</a>
            <button type="button"  onclick="returnOrder('<%= order.orderId %>')">Return Order</button>
           
        <% } %>

        <% if (order.paymentStatus === 'Payment Pending') { %>
          <button type="button"  onclick="retryPayment('<%= order.paymentOrderId %>')">Retry Payment</button>
         
      <% } %>
            
       
        
    </div>
    <%- include("../../views/partials/user/footer") %>


    <!-- Search Begin -->
    <div class="search-model">
        <div class="h-100 d-flex align-items-center justify-content-center">
            <div class="search-close-switch">+</div>
            <form class="search-model-form">
                <input type="text" id="search-input" placeholder="Search here.....">
            </form>
        </div>
    </div>
    <!-- Search End -->
    
    <!-- Js Plugins -->
    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.nice-select.min.js"></script>
    <script src="/js/jquery.nicescroll.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.countdown.min.js"></script>
    <script src="/js/jquery.slicknav.js"></script>
    <script src="/js/mixitup.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    </body>
    
    </html>
   
    <script>
      const cancelOrderButton = document.getElementById('cancel-button');

      cancelOrderButton.addEventListener('click', async (e) => {
        e.preventDefault();

        const orderId = e.target.getAttribute('data-id');
        const orderStatus = '<%= order.status %>';


        

        const { isConfirmed } = await Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to cancel this order?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#007bff',
          cancelButtonColor: '#dc3545',
          confirmButtonText: 'Yes, cancel it!',
        });

        if (isConfirmed) {
          document.getElementById('cancel').submit();
        }
      });

      async function returnOrder(orderId) {

        try {
          Response = await fetch(`/returnOrder`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId }),
          });

          const data = await response.json();


          if(Response.ok){
            Swal.fire({
              icon: 'success',
              title: 'Order returned successfully!',
              text: data.message,
              confirmButtonText: 'OK',
            });
           
          }else{
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: data.message || 'Something went wrong!',
            });
          }
        
        } catch (error) {
         
        }
        window.location.reload();
      }

      async function cancelItem(orderId, productId) {
            try {
              const response = await fetch(`/cancelItem/${orderId}/${productId}`, {
                    method: 'PATCH'
                });
                const result = await response.json();
                if (response.ok) {
                    Swal.fire({
                      icon:'Success',
                      title:'item cancelled successfully',
                      text:result.message,
                      confirmButtonText: 'OK'

                    }).then(()=>{
                      window.location.reload();
                    })
                   
                } else {
                    alert('Failed to cancel item.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred.');
            }
        }

      document.addEventListener("DOMContentLoaded", () => {

      const retryButton = document.getElementById("retryButton");

      if (!retryButton) {
        console.error("Retry button not found in the DOM.");
        return;
      }

    
    });

    async function retryPayment(paymentOrderId) {
  try {
    const orderResponse = await fetch(`/retry-payment/${paymentOrderId}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" }
    });

    const orderData = await orderResponse.json();

    const options = {
      key: "rzp_test_NwltbJ8WRRxJmi",
      amount: orderData.amount,
      currency: orderData.currency,
      order_id: orderData.razorPayOrderId,
      handler: async function (response) {
        try {
          const verifyResponse = await fetch("/retryVerify-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ response })
          });

          const verifyData = await verifyResponse.json();

          if (verifyData.success) {
            Swal.fire({
              icon: "success",
              title: "Payment Successful",
              text: "Your payment has been processed."
            }).then((result) => {
        if (result.isConfirmed) {
         
          window.location.href = "/orderSuccess"; 
        }
      });
          } else {
            Swal.fire({
              icon: "error", 
              title: "Payment Failed",
              text: verifyData.message
            });
          }
        } catch (error) {
          console.error('Verification Error:', error);
          Swal.fire({
            icon: "error",
            title: "Verification Error",
            text: error.message
          });
        }
      }
    };

    const rzp = new Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error('Retry Payment Error:', error);
    Swal.fire({
      icon: "error",
      title: "Payment Error",
      text: error.message
    });
  }
}



    </script>
    